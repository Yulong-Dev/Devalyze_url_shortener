const express = require("express");
const router = express.Router();
const { nanoid } = require("nanoid");
const Url = require("../models/Url");
const authMiddleware = require("../middleware/authMiddleware");
// Import validation utilities and the new schema
const { validate, urlListSchema, shortenUrlSchema } = require("../middleware/validation");

// POST: Shorten URL (only if logged in) - Applying body validation
router.post("/shorten", authMiddleware, validate(shortenUrlSchema), async (req, res) => {
Â  // req.body is now the validated body
Â  const { longUrl, customAlias } = req.body; 
Â  const shortCode = customAlias || nanoid(7);

Â  try {
Â  Â  // Check if custom alias is already in use
Â  Â  if (customAlias) {
Â  Â  Â  const existingUrl = await Url.findOne({ shortCode: customAlias });
Â  Â  Â  if (existingUrl) {
Â  Â  Â  Â  return res.status(409).json({ error: "Custom alias already taken" });
Â  Â  Â  }
Â  Â  }

Â  Â  let url = new Url({
Â  Â  Â  longUrl,
Â  Â  Â  shortCode,
Â  Â  Â  user: req.user.userId, // Link to logged-in user
Â  Â  });

Â  Â  await url.save();

Â  Â  const protocol = req.protocol;
Â  Â  const host = req.headers.host;
Â  Â  const fullShortUrl = `${protocol}://${host}/${shortCode}`;

Â  Â  res.json({ shortUrl: fullShortUrl });
Â  } catch (err) {
Â  Â  console.error("POST /shorten error:", err);
Â  Â  res.status(500).json({ error: "Server error" });
Â  }
});

// âœ… NEW ROUTE: Get all URLs belonging to the logged-in user with sorting/searching
router.get("/my-urls", authMiddleware, validate(urlListSchema), async (req, res) => {
Â  try {
Â  Â  // ðŸš¨ FIX: Access validated query parameters from req.validatedQuery
Â  Â  // Defaults (limit: 25, sort: 'createdAt', order: 'desc') are applied by Joi if not provided
Â  Â  const { limit, sort, order, search } = req.validatedQuery; 

Â  Â  const findQuery = { user: req.user.userId };
    
Â  Â  // Add search filtering for longUrl (case-insensitive)
Â  Â  if (search) {
Â  Â  Â  findQuery.longUrl = { $regex: search, $options: 'i' };
Â  Â  }

Â  Â  // Determine sort order: -1 for 'desc', 1 for 'asc'
Â  Â  const sortOrder = order === 'desc' ? -1 : 1;
Â  Â  const sortQuery = { [sort]: sortOrder };

Â  Â  const urls = await Url.find(findQuery)
Â  Â  Â  .limit(limit)
Â  Â  Â  .sort(sortQuery);

Â  Â  res.json(urls);
Â  } catch (err) {
Â  Â  console.error("GET /my-urls error:", err);
Â  Â  res.status(500).json({ error: "Server error" });
Â  }
});

router.delete("/:id", authMiddleware, async (req, res) => {
Â  try {
Â  Â  const deletedUrl = await Url.findOneAndDelete({
Â  Â  Â  _id: req.params.id,
Â    Â  user: req.user.userId,
Â  Â  });
Â  Â  if (!deletedUrl) {
Â  Â  Â  return res.status(404).json({ error: "URL not found or not authorized" });
Â  Â  }
Â  Â  res.json({ message: "URL deleted successfully", url: deletedUrl });
Â  } catch (err) {
Â  Â  console.error("DELETE /:id error:", err);
Â  Â  res.status(500).json({ error: "Server error" });
Â  }
});

// GET: Redirect short URL
router.get("/:shortCode", async (req, res) => {
Â  const { shortCode } = req.params;
Â  try {
Â  Â  const url = await Url.findOneAndUpdate(
Â  Â  Â  { shortCode },
Â  Â  Â  {
Â  Â  Â  Â  $inc: { clicks: 1 },
Â  Â  Â  Â  $push: { clickHistory: { timestamp: new Date() } }, // log click
Â  Â  Â  },
Â  Â  Â  { new: true }
Â  Â  );

Â  Â  if (url) {
Â  Â  Â  res.redirect(url.longUrl);
Â  Â  } else {
Â  Â  Â  res.status(404).send("URL not found");
Â  Â  }
Â  } catch (err) {
Â  Â  console.error("GET /:shortCode error:", err);
Â  Â  res.status(500).json({ error: "Server error" });
Â  }
});


module.exports = router;
